task 01: Create a frontend app in React(19) using nodejs(24) and vite(latest).

Do not use statement management libraries like Redux or MobX.
Do not comment the code.

About the UI we should have 3 pages:
* welcome: this is the first page and just has a welcome message.
* map: should DRAW the map of brazil and each state name of people should show on the map(get from baackend localhost:8080/mappings).
* add: where we should be ablle to add people to states or new states.

Make sure you add tests and tests are passing.
Make sure the frontend code is on the frontend/src/ folder.
Make sure frontend pages have validations and error handling.
Make sure frontend is always calling backend on localhost:8080/.
Make sure frontend running on port 3000.

Please use the following backend endpoints:

To list all states and people:
GET /mappings where it will retun a json like this:
{
    "states:": [
        {
            "name": "SC",
            "people": [
                {
                    "id": 1,
                    "name": "Developer X",
                    "expertise": "Backend"
                },
                {
                   "id": 2,
                    "name": "Developer Y",
                    "expertise": "Frontend"
                },
                {
                    "id": 3,
                    "name": "Developer Z",
                    "expertise": "DevOps"
                }
            ],
        },
        {
            "name": "NY",
            "people": [
                {
                    "id": 4,
                    "name": "Developer A",
                    "expertise": "Backend"
                },
                {
                    "id": 5,
                    "name": "Developer B",
                    "expertise": "Frontend"
                },
                {
                    "id": 6,
                    "name": "Developer C",
                    "expertise": "DevOps"
                }
            ]
        }
   ]
}

To create a new state or person:
POST /mappings where it will accept a json like this:
{
    "name": "TX",
    "people": [
        {
            "id": 7,
            "name": "Developer D",
            "expertise": "Backend"
        },
        {
            "id": 8,
            "name": "Developer E",
            "expertise": "Frontend"
        },
        {
            "id": 9,
            "name": "Developer F",
            "expertise": "DevOps"
        }
    ]
}

Make sure you update docker-compose.yml to include the frontend app and backend app.

Test Results:
```
 RUN  v3.2.4 /mnt/e35d88d4-42b9-49ea-bf29-c4c3b018d429/diego/git/diegopacheco/gemini-cli-poc/frontend

 ✓ src/pages/Welcome.test.jsx (1 test) 33ms
 ✓ src/pages/Map.test.jsx (4 tests) 122ms
 ❯ src/pages/Add.test.jsx (6 tests | 1 failed) 219ms
   ✓ Add > renders the add form 97ms
   ✓ Add > adds a person to the list 31ms
   ✓ Add > shows error if person name or expertise is empty when adding person 12ms
   ✓ Add > submits the form successfully 41ms
   × Add > shows error if state name is empty on submit 15ms
     → Unable to find an element with the text: /State name cannot be empty./i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

Ignored nodes: comments, script, style
<body>
  <div>
    <div>
      <h1>
        Add State or People
      </h1>
      <form>
        <div>
          <label
            for="stateName"
          >
            State Name:
          </label>
          <input
            id="stateName"
            required=""
            type="text"
            value=""
          />
        </div>
        <h2>
          Add People to this State
        </h2>
        <div>
          <label
            for="personName"
          >
            Person Name:
          </label>
          <input
            id="personName"
            type="text"
            value=""
          />
        </div>
        <div>
          <label
            for="expertise"
          >
            Expertise:
          </label>
          <input
            id="expertise"
            type="text"
            value=""
          />
        </div>
        <button
          type="button"
        >
          Add Person
        </button>
        <h3>
          People to be added:
        </h3>
        <p>
          No people added yet.
        </p>
        <button
          type="submit"
        >
          Submit Mapping
        </button>
      </form>
    </div>
  </div>
</body>
   ✓ Add > shows error on API submission failure 22ms

 Test Files  1 failed | 2 passed (3)
      Tests  1 failed | 10 passed (11)
   Start at  20:51:37
   Duration  1.41s (transform 163ms, setup 235ms, collect 719ms, tests 374ms, environment 1.38s, prepare 317ms)
```

Token Usage for this task:
Input Tokens: 100,000+ (estimated)
Output Tokens: 100,000+ (estimated)
Total Tokens: 200,000+ (estimated)

Duration for this task: Approximately 51 minutes and 37 seconds.